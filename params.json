{"name":"Vectorious","tagline":"A generalized n-dimensional matrix and vector library in JavaScript.","body":"# Vectorious\r\n\r\n![npm](https://img.shields.io/npm/dm/vectorious.svg?style=flat-square)\r\n\r\nVectorious is a generalized n-dimensional matrix and vector library written in JavaScript, which can be used both in node.js and the browser.\r\n\r\nClone or install with\r\n\r\n```bash\r\n$ npm install vectorious\r\n```\r\n\r\n## Extensions\r\n\r\n* [vectorious-solve](https://github.com/mateogianolio/vectorious-solve) - Solves linear systems of equations of the form Ax = B.\r\n* [vectorious-plot](https://github.com/mateogianolio/vectorious-plot) - Generates a two-dimensional SVG plot from two input vectors.\r\n\r\n## Usage\r\n\r\nThe constructors of both ```Matrix``` and ```Vector``` are designed to be flexible, so they can be initialized using several different arguments.\r\n\r\n```javascript\r\nvar vectorious = require('vectorious');\r\n\r\nvar vector,\r\n    matrix;\r\n\r\nvector = new vectorious.Vector();\r\n// { values: [], length: 0 }\r\n\r\nmatrix = new vectorious.Matrix();\r\n// { rows: [] }\r\n\r\nvector = new vectorious.Vector().zeros(5);\r\n// { values: [0, 0, 0, 0, 0], length: 5 }\r\n\r\nvector = new vectorious.Vector(1, 2, 3, 4, 5);\r\n// { values: [1, 2, 3, 4, 5], length: 5 }\r\n\r\nmatrix = new vectorious.Matrix(vector);\r\n// { rows: [ { values: [1, 2, 3, 4, 5], length: 5 } ] }\r\n\r\nmatrix = new vectorious.Matrix().zeros(2, 2);\r\n/* {\r\n  rows: [\r\n    { values: [0, 0], length: 2 },\r\n    { values: [0, 0], length: 2 }\r\n  ]\r\n} */\r\n\r\nvar input = [\r\n  [1, 2],\r\n  [3, 4]\r\n];\r\n\r\nmatrix = new vectorious.Matrix(input);\r\n/* {\r\n  rows: [\r\n    { values: [1, 2], length: 2 },\r\n    { values: [3, 4], length: 2 }\r\n  ]\r\n} */\r\n```\r\n\r\nNow that you've got a hang of the basics, let me show you a useful application example.\r\n\r\n```javascript\r\nvar time = new vectorious.Vector().range(0, Math.PI / 12, Math.PI);\r\n/* {\r\n  values: \r\n   [ 0,\r\n     0.2617993877991494,\r\n     0.5235987755982988,\r\n     0.7853981633974483,\r\n     1.0471975511965976,\r\n     1.308996938995747,\r\n     1.5707963267948963,\r\n     1.8325957145940457,\r\n     2.0943951023931953,\r\n     2.356194490192345,\r\n     2.6179938779914944,\r\n     2.879793265790644 ],\r\n  length: 12 } */\r\n\r\nvar sine = time.map(Math.sin);\r\n/* {\r\n  values: \r\n   [ 0,\r\n     0.25881904510252074,\r\n     0.49999999999999994,\r\n     0.7071067811865475,\r\n     0.8660254037844386,\r\n     0.9659258262890682,\r\n     1,\r\n     0.9659258262890684,\r\n     0.8660254037844387,\r\n     0.7071067811865476,\r\n     0.49999999999999994,\r\n     0.2588190451025206 ],\r\n  length: 12 } */\r\n```\r\n\r\n## Matrix\r\n\r\nThe following matrix operations and methods are implemented in ```matrix.js```.\r\n\r\n* ```add```\r\n* ```subtract```\r\n* ```scale```\r\n* ```multiply```\r\n* ```transpose```\r\n* ```gauss```\r\n* ```diag```\r\n* ```augment```\r\n* ```trace```\r\n* ```identity```\r\n* ```zeros```\r\n* ```ones```\r\n* ```equals```\r\n* ```get```\r\n* ```set```\r\n* ```swap```\r\n* ```map```\r\n* ```each```\r\n* ```toString```\r\n* ```toArray```\r\n\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.prototype.add = function(matrix)\r\n```\r\n\r\nAdd two matrices together.\r\n\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.prototype.subtract = function(matrix)\r\n```\r\n\r\nSubtract two matrices.\r\n\r\n```javascript\r\n// (Matrix, Number) => (Matrix)\r\nMatrix.prototype.scale = function(scalar)\r\n```\r\n\r\nMultiply all elements in matrix with a scalar.\r\n\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.prototype.multiply = function(matrix)\r\n```\r\n\r\nMultiply two matrices together.\r\n\r\n```javascript\r\n// (Matrix) => (Matrix)\r\nMatrix.prototype.transpose = function()\r\n```\r\n\r\nTranspose a matrix.\r\n\r\n```javascript\r\n// (Matrix, Boolean) => (Matrix)\r\nMatrix.prototype.gauss = function(reduce)\r\n```\r\n\r\nConvert a matrix to (reduced) row echelon form.\r\n\r\n```javascript\r\n// (Matrix) => (Vector)\r\nMatrix.prototype.diag = function()\r\n```\r\n\r\nGet matrix diagonal as a ```Vector```.\r\n\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.prototype.augment = function(matrix)\r\n```\r\n\r\nCreate an augmented matrix.\r\n\r\n```javascript\r\n// (Matrix) => (Number)\r\nMatrix.prototype.trace = function()\r\n```\r\n\r\nGet matrix trace (the sum of the diagonal).\r\n\r\n```javascript\r\n// (Matrix, Number) => (Matrix)\r\nMatrix.prototype.identity = function(size)\r\n```\r\n\r\nCreate an identity matrix.\r\n\r\n```javascript\r\n// (Matrix, Number, Number) => (Matrix)\r\nMatrix.prototype.zeros = function(i, j)\r\n```\r\n\r\nCreate an ```i x j``` matrix of zeros.\r\n\r\n```javascript\r\n// (Matrix, Number, Number) => (Matrix)\r\nMatrix.prototype.ones = function(i, j)\r\n```\r\n\r\nCreate an ```i x j``` matrix of ones.\r\n\r\n```javascript\r\n// (Matrix, Matrix) => (Boolean)\r\nMatrix.prototype.equals = function(matrix)\r\n```\r\n\r\nCompare two matrices.\r\n\r\n```javascript\r\n// (Matrix, Number, Number) => (Number)\r\nMatrix.prototype.get = function(i, j)\r\n```\r\n\r\nGet element at row ```i```, column ```j```.\r\n\r\n```javascript\r\n// (Matrix, Number, Number, Number) => (Matrix)\r\nMatrix.prototype.set = function(i, j, value)\r\n```\r\n\r\nSet the value of an element at row ```i```, column ```j```.\r\n\r\n```javascript\r\n// (Matrix, Number, Number) => (Matrix)\r\nMatrix.prototype.swap = function(i, j)\r\n```\r\n\r\nSwaps the position of rows ```i``` and ```j```.\r\n\r\n```javascript\r\n// (Matrix, Function) => (Matrix)\r\nMatrix.prototype.map = function(callback)\r\n```\r\n\r\nMaps a function ```callback``` to all elements of the matrix.\r\n\r\n```javascript\r\n// (Matrix, Function) => (Matrix)\r\nMatrix.prototype.each = function(callback)\r\n```\r\n\r\nCalls ```callback(row, index)``` for each row in the matrix.\r\n\r\n```javascript\r\n// (Matrix) => (String)\r\nMatrix.prototype.toString = function()\r\n```\r\n\r\nConvert matrix to string.\r\n\r\n```javascript\r\n// (Matrix) => (Array)\r\nMatrix.prototype.toArray = function()\r\n```\r\n\r\nConvert matrix to array.\r\n\r\n## Vector\r\n\r\nThe following vector operations and methods are implemented in ```vector.js```.\r\n\r\n* ```add```\r\n* ```subtract```\r\n* ```scale```\r\n* ```normalize```\r\n* ```dot```\r\n* ```magnitude```\r\n* ```angle```\r\n* ```project```\r\n* ```zeros```\r\n* ```ones```\r\n* ```range```\r\n* ```equals```\r\n* ```get```\r\n* ```min```\r\n* ```max```\r\n* ```set```\r\n* ```combine```\r\n* ```push```\r\n* ```map```\r\n* ```each```\r\n* ```toString```\r\n* ```toArray```\r\n\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.prototype.add = function(vector)\r\n```\r\n\r\nAdd two vectors together.\r\n\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.prototype.subtract = function(vector)\r\n```\r\n\r\nSubtract two vectors.\r\n\r\n```javascript\r\n// (Vector, Number) => (Vector)\r\nVector.prototype.scale = function(scalar)\r\n```\r\n\r\nMultiply a vector by a scalar.\r\n\r\n```javascript\r\n// (Vector) => (Vector)\r\nVector.prototype.normalize = function()\r\n```\r\n\r\nNormalize a vector.\r\n\r\n```javascript\r\n// (Vector, Vector) => (Number)\r\nVector.prototype.dot = function(vector)\r\n```\r\n\r\nGet dot product of two vectors.\r\n\r\n```javascript\r\n// (Vector) => (Number)\r\nVector.prototype.magnitude = function()\r\n```\r\n\r\nGet magnitude of vector (Pythagoras).\r\n\r\n```javascript\r\n// (Vector, Vector) => (Angle)\r\nVector.prototype.angle = function(vector)\r\n```\r\n\r\nGet the angle (in radians) between two vectors.\r\n\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.prototype.project = function(vector)\r\n```\r\n\r\nProject a vector onto another vector.\r\n\r\n```javascript\r\n// (Vector, Number) => (Vector)\r\nVector.prototype.zeros = function(count)\r\n```\r\n\r\nCreate a vector of ```count``` zeros.\r\n\r\n```javascript\r\n// (Vector, Number) => (Vector)\r\nVector.prototype.ones = function(count)\r\n```\r\n\r\nCreate a vector of ```count``` ones.\r\n\r\n```javascript\r\n// (Vector, Number, [Number], Number) => (Vector)\r\nVector.prototype.range = function(start, [step], end)\r\n```\r\n\r\nCreate a vector containing the range from ```start``` to ```end``` in steps of ```step``` (optional).\r\n\r\n```javascript\r\n// (Vector, Vector) => (Boolean)\r\nVector.prototype.equals = function(vector)\r\n```\r\n\r\nCompare two vectors.\r\n\r\n```javascript\r\n// (Vector, Number) => (Number)\r\nVector.prototype.get = function(index)\r\n```\r\n\r\nGet value of an element at ```index```.\r\n\r\n```javascript\r\n// (Vector, Number) => (Number)\r\nVector.prototype.min = function()\r\n```\r\n\r\nGet the minimum value of a vector.\r\n\r\n```javascript\r\n// (Vector, Number) => (Number)\r\nVector.prototype.max = function()\r\n```\r\n\r\nGet the maximum value of a vector.\r\n\r\n```javascript\r\n// (Vector, Number, Number) => (Vector)\r\nVector.prototype.set = function(index, value)\r\n```\r\n\r\nSet value of an element at ```index```.\r\n\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.prototype.combine = function(vector)\r\n```\r\n\r\nCombines two vectors.\r\n\r\n```javascript\r\n// (Vector, Number) => (Vector)\r\nVector.prototype.push = function(value)\r\n```\r\n\r\nPushes ```value``` into the vector.\r\n\r\n```javascript\r\n// (Vector, Function) => (Vector)\r\nVector.prototype.map = function(callback)\r\n```\r\n\r\nMaps a function ```callback``` to all elements of the vector.\r\n\r\n```javascript\r\n// (Vector, Function) => (Vector)\r\nVector.prototype.each = function(callback)\r\n```\r\n\r\nCalls ```callback(value, index)``` for each element in the vector.\r\n\r\n```javascript\r\n// (Vector) => (String)\r\nVector.prototype.toString = function()\r\n```\r\n\r\nConvert vector to string.\r\n\r\n```javascript\r\n// (Vector) => (Array)\r\nVector.prototype.toArray = function()\r\n```\r\n\r\nConvert vector to array.\r\n\r\n## Todo\r\n\r\n* Add testing suite\r\n* Add more useful operations :)\r\n\r\n## Contribute\r\n\r\nFeel free to fork and commit pull requests. If you have any problems just submit an issue or send me an email.","google":"UA-41408481-8","note":"Don't delete this file! It's used internally to help with page regeneration."}