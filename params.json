{"name":"Vectorious","tagline":"A generalized n-dimensional matrix and vector library in JavaScript.","body":"# Vectorious 2\r\n\r\n![npm version](https://img.shields.io/npm/v/vectorious.svg?style=flat-square) ![npm downloads](https://img.shields.io/npm/dm/vectorious.svg?style=flat-square) ![travis](https://img.shields.io/travis/mateogianolio/vectorious.svg?style=flat-square)\r\n\r\nVectorious is a generalized n-dimensional matrix and vector library written in JavaScript, which can be used both in node.js and the browser.\r\n\r\n\r\n## Installation\r\n\r\n#### In Node.js:\r\n\r\nInstall with ```npm```\r\n\r\n```bash\r\n$ npm install vectorious\r\n```\r\n\r\nTest with\r\n\r\n```bash\r\n$ mocha\r\n```\r\n\r\n#### In the browser:\r\n\r\nDownload ```dist/vectorious-2.0.0.js``` and use it like this:\r\n\r\n```html\r\n<script src=\"vectorious-2.0.0.js\"></script>\r\n<script>\r\n  // e.g. var vector = new vectorious.Vector()\r\n</script>\r\n```\r\n\r\n## Extensions\r\n\r\n* [Solve](https://github.com/mateogianolio/vectorious-solve)\r\n    * Solves matrix equations of the form Ax = B.\r\n* [Plot](https://github.com/mateogianolio/vectorious-plot)\r\n    * Generates a two-dimensional SVG plot from two input vectors.\r\n\r\n## Usage\r\n\r\nThe constructors of both ```Matrix``` and ```Vector``` are designed to be flexible, so they can be initialized using several different arguments.\r\n\r\n```javascript\r\nvar vectorious = require('vectorious');\r\n\r\nvar vector,\r\n    matrix;\r\n\r\nvector = new vectorious.Vector();\r\n// { values: [], length: 0 }\r\n\r\nmatrix = new vectorious.Matrix();\r\n// { rows: [] }\r\n\r\nvector = vectorious.Vector.zeros(5);\r\n// { values: [0, 0, 0, 0, 0], length: 5 }\r\n\r\nvector = new vectorious.Vector(1, 2, 3, 4, 5);\r\n// { values: [1, 2, 3, 4, 5], length: 5 }\r\n\r\nmatrix = new vectorious.Matrix(vector);\r\n// { rows: [ { values: [1, 2, 3, 4, 5], length: 5 } ] }\r\n\r\nmatrix = vectorious.Matrix.zeros(2, 2);\r\n/* {\r\n  rows: [\r\n    { values: [0, 0], length: 2 },\r\n    { values: [0, 0], length: 2 }\r\n  ]\r\n} */\r\n\r\nvar input = [\r\n  [1, 2],\r\n  [3, 4]\r\n];\r\n\r\nmatrix = new vectorious.Matrix(input);\r\n/* {\r\n  rows: [\r\n    { values: [1, 2], length: 2 },\r\n    { values: [3, 4], length: 2 }\r\n  ]\r\n} */\r\n```\r\n\r\nNow that you've got a hang of the basics, let me show you a useful application example.\r\n\r\n```javascript\r\nvar time = vectorious.Vector.range(0, Math.PI / 12, Math.PI);\r\n/* {\r\n  values: \r\n   [ 0,\r\n     0.2617993877991494,\r\n     0.5235987755982988,\r\n     0.7853981633974483,\r\n     1.0471975511965976,\r\n     1.308996938995747,\r\n     1.5707963267948963,\r\n     1.8325957145940457,\r\n     2.0943951023931953,\r\n     2.356194490192345,\r\n     2.6179938779914944,\r\n     2.879793265790644 ],\r\n  length: 12 } */\r\n\r\nvar sine = time.map(Math.sin);\r\n/* {\r\n  values: \r\n   [ 0,\r\n     0.25881904510252074,\r\n     0.49999999999999994,\r\n     0.7071067811865475,\r\n     0.8660254037844386,\r\n     0.9659258262890682,\r\n     1,\r\n     0.9659258262890684,\r\n     0.8660254037844387,\r\n     0.7071067811865476,\r\n     0.49999999999999994,\r\n     0.2588190451025206 ],\r\n  length: 12 } */\r\n```\r\n\r\n## Vector\r\n\r\nThe following vector operations and methods are implemented in ```vector.js```.\r\n\r\n* [```add```](#vector_add)\r\n* [```subtract```](#vector_subtract)\r\n* [```scale```](#vector_scale)\r\n* [```normalize```](#vector_normalize)\r\n* [```dot```](#vector_dot)\r\n* [```magnitude```](#vector_magnitude)\r\n* [```angle```](#vector_angle)\r\n* [```project```](#vector_project)\r\n* [```zeros```](#vector_zeros)\r\n* [```ones```](#vector_ones)\r\n* [```range```](#vector_range)\r\n* [```equals```](#vector_equals)\r\n* [```get```](#vector_get)\r\n* [```min```](#vector_min)\r\n* [```max```](#vector_max)\r\n* [```set```](#vector_set)\r\n* [```combine```](#vector_combine)\r\n* [```push```](#vector_push)\r\n* [```map```](#vector_map)\r\n* [```each```](#vector_each)\r\n* [```toString```](#vector_toString)\r\n* [```toArray```](#vector_toArray)\r\n\r\n<p id=\"vector_add\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.add = function(a, b)\r\nVector.prototype.add = function(vector)\r\n```\r\n\r\nAdd two vectors together.\r\n\r\n<p id=\"vector_subtract\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.subtract = function(a, b)\r\nVector.prototype.subtract = function(vector)\r\n```\r\n\r\nSubtract two vectors.\r\n\r\n<p id=\"vector_scale\"></p>\r\n```javascript\r\n// (Vector, Number) => (Vector)\r\nVector.prototype.scale = function(scalar)\r\n```\r\n\r\nMultiply a vector by a [scalar](http://en.wikipedia.org/wiki/Scalar_multiplication).\r\n\r\n<p id=\"vector_normalize\"></p>\r\n```javascript\r\n// (Vector) => (Vector)\r\nVector.prototype.normalize = function()\r\n```\r\n\r\n[Normalize](http://en.wikipedia.org/wiki/Unit_vector) a vector.\r\n\r\n<p id=\"vector_dot\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Number)\r\nVector.dot = function(a, b)\r\nVector.prototype.dot = function(vector)\r\n```\r\n\r\nGet [dot product](http://en.wikipedia.org/wiki/Dot_product) of two vectors.\r\n\r\n<p id=\"vector_magnitude\"></p>\r\n```javascript\r\n// (Vector) => (Number)\r\nVector.prototype.magnitude = function()\r\n```\r\n\r\nGet [magnitude (norm)](http://en.wikipedia.org/wiki/Norm_(mathematics)#Euclidean_norm) of vector.\r\n\r\n<p id=\"vector_angle\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Angle)\r\nVector.angle = function(a, b)\r\nVector.prototype.angle = function(vector)\r\n```\r\n\r\nGet the angle (in radians) between two vectors.\r\n\r\n<p id=\"vector_project\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.project = function(a, b)\r\nVector.prototype.project = function(vector)\r\n```\r\n\r\n[Project](http://en.wikipedia.org/wiki/Vector_projection) a vector onto another vector.\r\n\r\n<p id=\"vector_zeros\"></p>\r\n```javascript\r\n// (Number) => (Vector)\r\nVector.zeros = function(count)\r\n```\r\n\r\nCreate a vector of ```count``` zeros.\r\n\r\n<p id=\"vector_ones\"></p>\r\n```javascript\r\n// (Number) => (Vector)\r\nVector.ones = function(count)\r\n```\r\n\r\nCreate a vector of ```count``` ones.\r\n\r\n<p id=\"vector_range\"></p>\r\n```javascript\r\n// (Number, [Number], Number) => (Vector)\r\nVector.range = function(start, [step], end)\r\n```\r\n\r\nCreate a vector containing the range from ```start``` to ```end``` in steps of ```step``` (optional).\r\n\r\n<p id=\"vector_equals\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Boolean)\r\nVector.equals = function(a, b)\r\nVector.prototype.equals = function(vector)\r\n```\r\n\r\nCompare two vectors.\r\n\r\n<p id=\"vector_get\"></p>\r\n```javascript\r\n// (Vector, Number) => (Number)\r\nVector.prototype.get = function(index)\r\n```\r\n\r\nGet value of an element at ```index```.\r\n\r\n<p id=\"vector_min\"></p>\r\n```javascript\r\n// (Vector, Number) => (Number)\r\nVector.prototype.min = function()\r\n```\r\n\r\nGet the minimum value of a vector.\r\n\r\n<p id=\"vector_max\"></p>\r\n```javascript\r\n// (Vector, Number) => (Number)\r\nVector.prototype.max = function()\r\n```\r\n\r\nGet the maximum value of a vector.\r\n\r\n<p id=\"vector_set\"></p>\r\n```javascript\r\n// (Vector, Number, Number) => (Vector)\r\nVector.prototype.set = function(index, value)\r\n```\r\n\r\nSet value of an element at ```index```.\r\n\r\n<p id=\"vector_combine\"></p>\r\n```javascript\r\n// (Vector, Vector) => (Vector)\r\nVector.combine = function(a, b)\r\nVector.prototype.combine = function(vector)\r\n```\r\n\r\nCombines two vectors.\r\n\r\n<p id=\"vector_push\"></p>\r\n```javascript\r\n// (Vector, Number) => (Vector)\r\nVector.prototype.push = function(value)\r\n```\r\n\r\nPushes ```value``` into the vector.\r\n\r\n<p id=\"vector_map\"></p>\r\n```javascript\r\n// (Vector, Function) => (Vector)\r\nVector.prototype.map = function(callback)\r\n```\r\n\r\nMaps a function ```callback``` to all elements of the vector.\r\n\r\n<p id=\"vector_each\"></p>\r\n```javascript\r\n// (Vector, Function) => (Vector)\r\nVector.prototype.each = function(callback)\r\n```\r\n\r\nCalls ```callback(value, index)``` for each element in the vector.\r\n\r\n<p id=\"vector_toString\"></p>\r\n```javascript\r\n// (Vector) => (String)\r\nVector.prototype.toString = function()\r\n```\r\n\r\nConvert vector to string.\r\n\r\n<p id=\"vector_toArray\"></p>\r\n```javascript\r\n// (Vector) => (Array)\r\nVector.prototype.toArray = function()\r\n```\r\n\r\nConvert vector to array.\r\n\r\n## Matrix\r\n\r\nThe following matrix operations and methods are implemented in ```matrix.js```.\r\n\r\n* [```add```](#matrix_add)\r\n* [```subtract```](#matrix_subtract)\r\n* [```scale```](#matrix_scale)\r\n* [```multiply```](#matrix_multiply)\r\n* [```transpose```](#matrix_transpose)\r\n* [```inverse```](#matrix_inverse)\r\n* [```gauss```](#matrix_gauss)\r\n* [```diag```](#matrix_diag)\r\n* [```augment```](#matrix_augment)\r\n* [```trace```](#matrix_trace)\r\n* [```identity```](#matrix_identity)\r\n* [```zeros```](#matrix_zeros)\r\n* [```ones```](#matrix_ones)\r\n* [```equals```](#matrix_equals)\r\n* [```get```](#matrix_get)\r\n* [```set```](#matrix_set)\r\n* [```swap```](#matrix_swap)\r\n* [```map```](#matrix_map)\r\n* [```each```](#matrix_each)\r\n* [```toString```](#matrix_toString)\r\n* [```toArray```](#matrix_toArray)\r\n\r\n<p id=\"matrix_add\"></p>\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.add = function(a, b)\r\nMatrix.prototype.add = function(matrix)\r\n```\r\n\r\n[Add](http://en.wikipedia.org/wiki/Matrix_addition) two matrices together.\r\n\r\n<p id=\"matrix_subtract\"></p>\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.subtract = function(a, b)\r\nMatrix.prototype.subtract = function(matrix)\r\n```\r\n\r\nSubtract two matrices.\r\n\r\n<p id=\"matrix_scale\"></p>\r\n```javascript\r\n// (Matrix, Number) => (Matrix)\r\nMatrix.prototype.scale = function(scalar)\r\n```\r\n\r\nMultiply all elements in matrix with a [scalar](http://en.wikipedia.org/wiki/Matrix_multiplication#Scalar_multiplication).\r\n\r\n<p id=\"matrix_multiply\"></p>\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.multiply = function(a, b)\r\nMatrix.prototype.multiply = function(matrix)\r\n```\r\n\r\n[Multiply](http://en.wikipedia.org/wiki/Matrix_multiplication#Matrix_product_.28two_matrices.29) two matrices together.\r\n\r\n<p id=\"matrix_transpose\"></p>\r\n```javascript\r\n// (Matrix) => (Matrix)\r\nMatrix.prototype.transpose = function()\r\n```\r\n\r\n[Transpose](http://en.wikipedia.org/wiki/Transpose) a matrix.\r\n\r\n<p id=\"matrix_gauss\"></p>\r\n```javascript\r\n// (Matrix, Boolean) => (Matrix)\r\nMatrix.prototype.gauss = function()\r\n```\r\n\r\nConvert a matrix to [reduced row echelon (RREF)](http://en.wikipedia.org/wiki/Row_echelon_form#Reduced_row_echelon_form) form using [Gauss-Jordan eliminiation](http://en.wikipedia.org/wiki/Gaussian_elimination).\r\n\r\n<p id=\"matrix_inverse\"></p>\r\n```javascript\r\n// (Matrix) => (Matrix)\r\nMatrix.prototype.inverse = function()\r\n```\r\n\r\nGet the [inverse](http://en.wikipedia.org/wiki/Invertible_matrix) of any invertible square matrix using [Gauss-Jordan elimination](http://en.wikipedia.org/wiki/Gaussian_elimination#Finding_the_inverse_of_a_matrix).\r\n\r\n<p id=\"matrix_diag\"></p>\r\n```javascript\r\n// (Matrix) => (Vector)\r\nMatrix.prototype.diag = function()\r\n```\r\n\r\nGet [matrix diagonal](http://en.wikipedia.org/wiki/Main_diagonal) as a ```Vector```.\r\n\r\n<p id=\"matrix_augment\"></p>\r\n```javascript\r\n// (Matrix, Matrix) => (Matrix)\r\nMatrix.augment = function(a, b)\r\nMatrix.prototype.augment = function(matrix)\r\n```\r\n\r\nCreate an [augmented matrix](http://en.wikipedia.org/wiki/Augmented_matrix).\r\n\r\n<p id=\"matrix_trace\"></p>\r\n```javascript\r\n// (Matrix) => (Number)\r\nMatrix.prototype.trace = function()\r\n```\r\n\r\nGet [matrix trace](http://en.wikipedia.org/wiki/Trace_(linear_algebra)) (the sum of the diagonal).\r\n\r\n<p id=\"matrix_identity\"></p>\r\n```javascript\r\n// (Number) => (Matrix)\r\nMatrix.identity = function(size)\r\n```\r\n\r\nCreate an [identity matrix](http://en.wikipedia.org/wiki/Identity_matrix).\r\n\r\n<p id=\"matrix_zeros\"></p>\r\n```javascript\r\n// (Number, Number) => (Matrix)\r\nMatrix.zeros = function(i, j)\r\n```\r\n\r\nCreate an ```i x j``` matrix of zeros.\r\n\r\n<p id=\"matrix_ones\"></p>\r\n```javascript\r\n// (Number, Number) => (Matrix)\r\nMatrix.ones = function(i, j)\r\n```\r\n\r\nCreate an ```i x j``` matrix of ones.\r\n\r\n<p id=\"matrix_equals\"></p>\r\n```javascript\r\n// (Matrix, Matrix) => (Boolean)\r\nMatrix.equals = function(a, b)\r\nMatrix.prototype.equals = function(matrix)\r\n```\r\n\r\nCompare two matrices.\r\n\r\n<p id=\"matrix_get\"></p>\r\n```javascript\r\n// (Matrix, Number, Number) => (Number)\r\nMatrix.prototype.get = function(i, j)\r\n```\r\n\r\nGet element at row ```i```, column ```j```.\r\n\r\n<p id=\"matrix_set\"></p>\r\n```javascript\r\n// (Matrix, Number, Number, Number) => (Matrix)\r\nMatrix.prototype.set = function(i, j, value)\r\n```\r\n\r\nSet the value of an element at row ```i```, column ```j```.\r\n\r\n<p id=\"matrix_swap\"></p>\r\n```javascript\r\n// (Matrix, Number, Number) => (Matrix)\r\nMatrix.prototype.swap = function(i, j)\r\n```\r\n\r\nSwaps the position of rows ```i``` and ```j```.\r\n\r\n<p id=\"matrix_map\"></p>\r\n```javascript\r\n// (Matrix, Function) => (Matrix)\r\nMatrix.prototype.map = function(callback)\r\n```\r\n\r\nMaps a function ```callback``` to all elements of the matrix.\r\n\r\n<p id=\"matrix_each\"></p>\r\n```javascript\r\n// (Matrix, Function) => (Matrix)\r\nMatrix.prototype.each = function(callback)\r\n```\r\n\r\nCalls ```callback(row, index)``` for each row in the matrix.\r\n\r\n<p id=\"matrix_toString\"></p>\r\n```javascript\r\n// (Matrix) => (String)\r\nMatrix.prototype.toString = function()\r\n```\r\n\r\nConvert matrix to string.\r\n\r\n<p id=\"matrix_toArray\"></p>\r\n```javascript\r\n// (Matrix) => (Array)\r\nMatrix.prototype.toArray = function()\r\n```\r\n\r\nConvert matrix to array.","google":"UA-41408481-8","note":"Don't delete this file! It's used internally to help with page regeneration."}